n.IDs
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
n.animal.call
n.animals
aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))
capt
aggregate(paste(capt$animal_ID, capt$ID, sep = "-"), list(session = capt$session),
function(x) length(unique(x)))
paste(capt$animal_ID, capt$ID, sep = "-")
aggregate(capt$animal_ID, list(session = capt$session), max)
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))
#n.IDs becomes the number of length(unique(animal_ID, ID)) for each session
n.IDs = aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))$x
n.IDs = ifelse(n.animals == 0, 0, n.IDs)
n.IDs
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
tem = subset(data.ID_mask, session == 2 & mask == 777)
tem
tem = subset(data.ID_mask, session == 2 & mask == 777 & animal_ID == 7)
tem
subset(data.full, session == 2 & animal_ID == 7 & (ID == 8 | ID == 7))
subset(data.full, session == 2 & animal_ID == 7 & (ID == 8 | ID == 7), select = c('session', 'animal_ID', 'ID', 'trap', 'bincapt', 'toa'))
sound.speed
q
tem$output.tmb$coef_link
View(captures)
subset(captures, session == 2 & as.numeric(as.factor(animal_ID)) == 7)
tem = subset(captures, session == 2)
tem
subset(tem, as.numeric(as.factor(animal_ID)) == 7)
tem1 = subset(tem, as.numeric(as.factor(animal_ID)) == 7)
tem1$ID = as.numeric(as.factor(tem1$ID))
tem1
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
View(masks)
#' @param mask
#' @param survey.length
#' @param ss.opts
#' @param cue.rates
#' @param sound.speed
#'
#' @return
#' @export
#'
#' @examples
sim.capt = function(fit, detfn, par, par.extend, traps, mask, survey.length, ss.opts, cue.rates, sound.speed = 330){
browser()
if(!is.null(fit)){
return(sim.from.fit(fit))
} else {
stopifnot(all(!is.null(detfn), !is.null(par), !is.null(traps), !is.null(mask)))
return(sim.from.par(detfn = detfn, par = par, par.extend = par.extend, traps = traps,
mask = mask, survey.length = survey.length, ss.opts = ss.opts, cue.rates = cue.rates,
sound.speed = sound.speed))
}
}
sim.capt(fit = 10)
is.null(fit)
is.null(detfn)
is.missing(detfn)
is.null(detfn)
missing(detfn)
rm(sim.capt)
View(traps)
is(traps, 'data.frame')
is(traps, 'matrix')
par.extend = readRDS('./inst/demo_extend_no_animal_ID')
View(par.extend)
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = function(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link('mu')
traps = list(traps, traps)
masks = list(masks, masks)
attr(masks[[1]], 'buffer')
attr(masks[[1]], 'area.unit')
attr(masks[[1]])
?attr
attr(masks[[1]], 'area')
c('D')
detfn = 's'
detfn = 'ss'
is.ss = detfn == 'ss'
is.ss
rep(1:2, c(5,3))
cat('order')
sim.data.prepare = function(detfn, param, par.extend, traps, mask, survey.length, ss.opts, cue.rates, n.sessions, sound.speed){
stopifnot(detfn %in% c('hn', 'hhn', 'hr', 'th', 'lth', 'ss'))
#confirm n.sessions firstly
if(is(traps, 'list')){
if(!missing(n.sessions)) warning("'n.sessions' will be ignored as 'traps' is a list.")
n.sessions = length(traps)
if(is(mask, 'list')){
stopifnot(length(mask) == n.sessions)
} else {
stopifnot(any(is(mask, 'matrix'), is(mask, 'data.frame')))
tem = mask
mask = vector('list', n.sessions)
for(s in 1:n.sessions) mask[[s]] = tem
}
} else {
if(missing(n.sessions)){
if(is(mask, 'list')){
n.sessions = length(mask)
} else {
stopifnot(any(is(mask, 'matrix'), is(mask, 'data.frame')))
mask = list(mask)
n.sessions = 1
}
} else {
if(is(mask, 'list')){
stopifnot(length(mask) == n.sessions)
} else {
stopifnot(any(is(mask, 'matrix'), is(mask, 'data.frame')))
tem_mask = mask
mask = vector('list', n.sessions)
for(s in 1:n.sessions){
mask[[s]] = tem_mask
}
}
}
stopifnot(any(is(traps, 'matrix'), is(traps, 'data.frame')))
tem_traps = traps
traps = vector('list', n.sessions)
for(s in 1:n.sessions){
traps[[s]] = tem_traps
}
}
#fill with basic information
if(missing(survey.length)){
survey.length = rep(1, n.sessions)
} else {
stopifnot(length(survey.length) == n.sessions)
}
n.traps = sapply(traps, nrow)
n.masks = sapply(mask, nrow)
buffer = numeric(n.sessions)
A = numeric(n.sessions)
for(s in 1:n.sessions){
buffer[s] = attr(masks[[s]], 'buffer')
A[s] = attr(masks[[s]], 'area')
}
param.og = detfn.params(detfn)
animal.model = 'mu' %in% names(param)
is.toa = 'sigma.toa' %in% names(param)
is.bearing = 'kappa' %in% names(param)
is.dist = 'alpha' %in% names(param)
is.ss = detfn == 'ss'
param.og = c(param.og, 'D')
if(animal.model) param.og = c(param.og, 'mu')
if(is.toa) param.og = c(param.og, 'sigma.toa')
if(is.bearing) param.og = c(param.og, 'kappa')
if(is.dist) param.og = c(param.og, 'alpha')
#create a session-trap-mask data frame for everything
dat_list = vector('list', n.sessions)
for(s in 1:n.sessions){
tem_dx = distances(as.matrix(traps[[s]]), as.matrix(mask[[s]]))
tem_theta = bearings(as.matrix(traps[[s]]), as.matrix(mask[[s]]))
dat_list[[s]] = data.frame(session = rep(i, n.masks[s] * n.traps[s]),
mask = rep(1:n.masks[s], each = n.traps[s]),
trap = rep(1:n.traps[s], n.masks[s]),
dx = as.vector(tem_dx),
theta = as.vector(tem_theta),
mask_size = A[s],
survery_length = survey.length[s])
}
dat = do.call('rbind', dat_list)
dat = sort.data(dat, "data.dists.thetas")
if(missing(par.extend)){
#if par.extend is not provided, the param must be a list with "original values" of all parameters
for(i in param.og){
par.value = param[[i]]
if(is.null(par.value)) stop(paste0('please provide parameter: ', i))
dat[[i]] = par.value
}
} else {
#if par.extend is provided, the param must be a list. if a parameter is extended, then the corresponding element
#in "param" should be a vector with all coefficients of its linear predictor; otherwise, the element should be
#simply the original value.
if(!all(names(par.extend) %in% c('data', 'model', 'link', 'scale'))) {
stop("'par.extend' only accepts 'data', 'model', 'link' and 'scale' as input.")
}
#since at the beginning of simulation, we do not have observation at all, we cannot make any scaling work.
if(!is.null(par.extend$scale)){
warning(paste0("'scale' will be ignored."))
}
if(!all(c('data', 'model') %in% names(par.extend))){
stop("'data' and 'model' must be provided.")
}
name.extend.par = names(par.extend$model)
if('sigma.b0.ss' %in% name.extend.par) stop('sigma.b0.ss is not supported for parameter extension.')
if(!all(name.extend.par %in% param.og)){
stop('one or more parameters assigned in "par.extend" is not valid according to assigned detection function.')
}
tem_dat = dat[,c('session', 'trap', 'mask')]
input_data = par.extend$data
if(!all(names(input_data) %in% c('session', 'trap',
#'animal_ID',
'mask'))){
stop("only 'session', 'trap', or 'mask' level data could be used as input.")
}
if(!is.null(input_data$session)){
stopifnot('session' %in% colnames(input_data$session))
tem_dat = merge(tem_dat, input_data$session, by = 'session', all.x = T)
}
if(!is.null(input_data$trap)){
stopifnot(all(c('session', 'trap') %in% colnames(input_data$trap)))
tem_dat = merge(tem_dat, input_data$trap, by = c('session', 'trap'), all.x = T)
}
if(!is.null(input_data$mask)){
stopifnot(all(c('session', 'mask') %in% colnames(input_data$mask)))
tem_dat = merge(tem_dat, input_data$mask, by = c('session', 'mask'), all.x = T)
}
data.mask = as.data.frame(do.call('rbind', mask))
colnames(data.mask) = c('x', 'y')
data.mask$session = rep(1:n.sessions, n.masks)
tem_mask_index = seq(n.masks[1])
if(n.sessions > 1){
for(s in 2:n.sessions) tem_mask_index = c(tem_mask_index, seq(n.masks[s]))
}
data.mask$mask = tem_mask_index
#include 'x' and 'y' in case they are used
tem_dat = merge(tem_dat, data.mask, by = c('session', 'mask'), all.x = T)
tem_dat = sort.data(tem_dat, "data.dists.thetas")
tem_dat$gam.resp = 1
for(i in param.og){
par.value = param[[i]]
if(is.null(par.value)) stop(paste0('please provide parameter: ', i))
if(i %in% name.extend.par){
foo = stats::as.formula(paste(c('gam.resp', as.character(par.extend$model[[i]])), collapse = ""))
tem_model = mgcv::gam(foo, data = tem_dat, fit = FALSE)
DX = tem_model$X
cat(paste0("For extended parameter ", i, ", the corresponding covariates are: ", paste(colnames(DX), collapse = ", "), ".\n",
"Please make sure the order of coefficients values in the 'param' for this parameter is correct."))
if(is.null(par.extend$link[[i]])){
link = default.link(i)
} else {
link = par.extend$link[[i]]
}
dat[[i]] = unlink.fun(link, DX %*% par.value)
} else {
dat[[i]] = par.value
}
}
}
#D is animal density for no matter what kind of model is
dat$D = dat$D * dat$mask_size
return(dat)
}
library(devtools)
load_all()
rm(default.link())
rm(default.link)
rm(sim.data.prepare)
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
load_all()
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
tem$output.tmb$coef_link
View(traps)
View(capt)
demo_sim_input = list(detfn = 'hhn', param = tem$output.tmb$coef_link, par.extend = list(model = list(sigma = ~brand), data = list(trap = data.frame(session = rep(1:2, each = 6), trap = rep(1:6, 2), brand = sample(c('SONY', 'TOSHIBA', 'PHILIPS'), size = 12, replace = T)))), traps = traps, mask = masks, n.sessions = 2)
demo_sim_input$param
demo_sim_input$param$sigma = c(0.5, 0.1, 0.3)
demo_sim_input$param
default.link('lambda0')
demo_sim_input$param$lambda0 = exp(2.014286)
default.link('sigma.toa')
demo_sim_input$param$sigma.toa = exp(-6.868674)
default.link('mu')
default.link('D')
demo_sim_input$param$D = exp(5.881902)
demo_sim_input$param$mu = exp(2.205067)
demo_sim_input$param
saveRDS(demo_sim_input, './inst/demo_sim_sigma_extend')
demo_sim_input = list(detfn = 'hhn', param = tem$output.tmb$coef_link, par.extend = list(model = list(D = ~noise), data = list(mask = data.frame(session = rep(1:2, each = 4393), mask = rep(1:4393, 2), noise = rnorm(4393*2, 13, 0.5)))), traps = traps, mask = masks, n.sessions = 2)
demo_sim_input$param
demo_sim_input$param$D = c(4.497, 0.1)
for(i in names(demo_sim_input$param)){
if(i != 'D') demo_sim_input$param[[i]] = exp(demo_sim_input$param[[i]])
}
demo_sim_input$param
head(demo_sim_input$par.extend$data$mask)
demo_sim_input$par.extend$model$D
saveRDS(demo_sim_input, './inst/demo_sim_D_extend')
demo_sim_input = list(detfn = 'hhn', param = tem$output.tmb$coef_link, traps = traps, mask = masks, n.sessions = 2)
for(i in names(demo_sim_input$param)){
demo_sim_input$param[[i]] = exp(demo_sim_input$param[[i]])
}
demo_sim_input$param
saveRDS(demo_sim_input, './inst/demo_sim_origin')
demo_sim_origin = readRDS('./inst/demo_sim_origin')
tem = with(demo_sim_origin, sim.data.prepare(detfn = detfn, param = param, traps = traps, mask = mask, n.sessions = n.sessions))
tem = with(demo_sim_origin, sim.data.prepare(detfn = detfn, param = param, traps = traps, mask = mask, n.sessions = n.sessions))
load_all()
tem = with(demo_sim_origin, sim.data.prepare(detfn = detfn, param = param, traps = traps, mask = mask, n.sessions = n.sessions))
load_all()
tem = with(demo_sim_origin, sim.data.prepare(detfn = detfn, param = param, traps = traps, mask = mask, n.sessions = n.sessions))
View(tem)
demo_sim_origin$traps[3,]
demo_sim_origin$mask[2,]
m = demo_sim_origin$mask[2,]
t = demo_sim_origin$traps[3,]
sqrt(sum((m - t)^2))
load_all()
tem = with(demo_sim_origin, sim.data.prepare(detfn = detfn, param = param, traps = traps, mask = mask, n.sessions = n.sessions))
tem$dims
head(tem$dat_pars)
head(tem$dat_pars, 15)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
rpois(c(5), 1:5)
dat_pars = tem$dat_pars
#firstly generate the number of animals for each mask, this step is the same with any type of model
dat.mask = dat_pars[, c('session', 'mask', 'D')]
dat.mask = dat_pars[!duplicated(dat_pars$session, dat_pars$mask),]
#firstly generate the number of animals for each mask, this step is the same with any type of model
dat.mask = dat_pars[, c('session', 'mask', 'D')]
dat.mask = dat.mask[!duplicated(dat.mask$session, dat.mask$mask),]
View(dat.mask)
?duplicated
duplicated(dat.mask$session, dat.mask$mask)
View(dat.mask)
test = dat.mask[1:20,]
test
duplicated(test)
duplicated(test$session, test$mask)
duplicated(list(test$session, test$mask))
#firstly generate the number of animals for each mask, this step is the same with any type of model
dat.mask = dat_pars[, c('session', 'mask', 'D')]
dat.mask = dat.mask[!duplicated(dat.mask[,c('session', 'mask')]),]
8786/2
dat.mask$n_animals = rpois(nrow(dat.mask), dat.mask$D)
sum(dat.mask$n_animals)
rpois(1, sum(dat.mask$D))
rpois(1, sum(dat.mask$D))
rpois(1, sum(dat.mask$D))
rpois(1, sum(dat.mask$D))
rpois(1, sum(dat.mask$D))
rpois(0,2)
rmultinom(3,5)
rmultinom(3,5, c(1,1,1))
rmultinom(1,5, c(1,1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
rmultinom(1,5, c(1,1))
dat.mask[1:10,]
demo_sim_origin$mask[1:6,]
diff(demo_sim_origin$mask[1:6,'x'])
demo_sim_origin$mask[1:100,]
attr(demo_sim_origin$mask, 'area')
sqrt(2.5e-05)

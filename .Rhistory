hist(sim_b0.ss_PHILIPS, main = 'b0.ss_PHILIPS_link simulation')
abline(v = true_values$b0.ss[2], col = 2)
hist(sim_b0.ss_SONY, main = 'b0.ss_SONY_link simulation')
abline(v = true_values$b0.ss[3], col = 2)
hist(sim_b0.ss_sunny, main = 'b0.ss_sunny_link simulation')
abline(v = true_values$b0.ss[4], col = 2)
hist(sim_b1.ss, main = 'b1.ss_link simulation')
abline(v = true_values$b1.ss, col = 2)
hist(sim_sigma.ss, main = 'sigma.ss_link simulation')
abline(v = true_values$sigma.ss, col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_noise, main = 'D_noise_link simulation')
abline(v = true_values$D[2], col = 2)
hist(sim_b0.ss_int[sim_b0.ss_int > -10 & sim_b0.ss_int < 4], main = 'b0.ss_int_link simulation (without outlier)')
abline(v = true_values$b0.ss[1], col = 2)
hist(sim_b0.ss_PHILIPS[sim_b0.ss_PHILIPS < 0.5], main = 'b0.ss_PHILIPS_link simulation (without outlier)')
abline(v = true_values$b0.ss[2], col = 2)
hist(sim_b0.ss_SONY[sim_b0.ss_SONY < 1], main = 'b0.ss_SONY_link simulation (without outlier)')
abline(v = true_values$b0.ss[3], col = 2)
hist(sim_b0.ss_sunny[sim_b0.ss_sunny < 15 & sim_b0.ss_sunny > -4], main = 'b0.ss_sunny_link simulation (without outlier)')
abline(v = true_values$b0.ss[4], col = 2)
hist(sim_b1.ss, main = 'b1.ss_link simulation (without outlier)')
abline(v = true_values$b1.ss, col = 2)
hist(sim_sigma.ss, main = 'sigma.ss_link simulation (without outlier)')
abline(v = true_values$sigma.ss, col = 2)
hist(sim_D_int[sim_D_int > -5], main = 'D_int_link simulation (without outlier)')
abline(v = true_values$D[1], col = 2)
hist(sim_D_noise[sim_D_noise < 10 & sim_D_noise > -40], main = 'D_noise_link simulation (without outlier)')
abline(v = true_values$D[2], col = 2)
demo_sim_ss_ext_2nd = readRDS('./inst/demo_sim_ss_ext_2nd')
true_values = demo_sim_ss_ext_2nd$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_ss_ext_2nd, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, ss.opts = ss.opts, n.sessions = n.sessions, n.rand = n.rand))
sim_b0.ss_int = numeric(n.rand)
sim_b0.ss_PHILIPS = numeric(n.rand)
sim_b0.ss_SONY = numeric(n.rand)
sim_b0.ss_sunny = numeric(n.rand)
sim_b1.ss = numeric(n.rand)
sim_sigma.ss = numeric(n.rand)
sim_D_int = numeric(n.rand)
sim_D_noise = numeric(n.rand)
sim_mu = numeric(n.rand)
unique(sim_out[[1]]$session)
pb = utils::txtProgressBar(1, n.rand, style = 3)
for(i in 1:n.rand){
if(nrow(sim_out[[i]]) > 0){
capt = create.capt(sim_out[[i]], demo_sim_ss_ext_2nd$traps)
fit = fit.ascr(capt, traps = demo_sim_ss_ext_2nd$traps, mask = demo_sim_ss_ext_2nd$mask, detfn = demo_sim_ss_ext_2nd$detfn
, ss.opts = demo_sim_ss_ext_2nd$ss.opts, par.extend = demo_sim_ss_ext_2nd$par.extend)
tem = coef(fit)
sim_b0.ss_int[i] = tem['b0.ss.(Intercept)_link']
sim_b0.ss_PHILIPS[i] = tem['b0.ss.brandPHILIPS_link']
sim_b0.ss_SONY[i] = tem['b0.ss.brandSONY_link']
sim_b0.ss_sunny[i] = tem['b0.ss.weathersunny_link']
sim_b1.ss[i] = tem['b1.ss_link']
sim_sigma.ss[i] = tem['sigma.ss_link']
sim_D_int[i] = tem['D.(Intercept)_link']
sim_D_noise[i] = tem['D.noise_link']
sim_mu[i] = tem['mu_link']
}
utils::setTxtProgressBar(pb, i)
}
close(pb)
hist(sim_b0.ss_int, main = 'b0.ss_int_link simulation')
abline(v = true_values$b0.ss[1], col = 2)
hist(sim_b0.ss_PHILIPS, main = 'b0.ss_PHILIPS_link simulation')
abline(v = true_values$b0.ss[2], col = 2)
hist(sim_b0.ss_SONY, main = 'b0.ss_SONY_link simulation')
abline(v = true_values$b0.ss[3], col = 2)
hist(sim_b0.ss_sunny, main = 'b0.ss_sunny_link simulation')
abline(v = true_values$b0.ss[4], col = 2)
hist(sim_b1.ss, main = 'b1.ss_link simulation')
abline(v = true_values$b1.ss, col = 2)
hist(sim_sigma.ss, main = 'sigma.ss_link simulation')
abline(v = true_values$sigma.ss, col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_noise, main = 'D_noise_link simulation')
abline(v = true_values$D[2], col = 2)
load("G:/github/ascr/sim_hn_ext.RData")
true_values
hist(sim_g0, main = 'g0_link simulation')
abline(v = true_values$g0, col = 2)
hist(sim_sigma_int, main = 'sigma_int_link simulation')
abline(v = true_values$sigma[1], col = 2)
hist(sim_sigma_PHILIPS, main = 'sigma_philips_link simulation')
abline(v = true_values$sigma[2], col = 2)
hist(sim_sigma_SONY, main = 'sigma_sony_link simulation')
abline(v = true_values$sigma[3], col = 2)
hist(sim_sigma_sunny, main = 'sigma_sunny_link simulation')
abline(v = true_values$sigma[4], col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_sunny, main = 'D_sunny_link simulation')
abline(v = true_values$D[2], col = 2)
hist(sim_mu, main = 'mu_link simulation')
abline(v = true_values$mu, col = 2)
exp(2)
exp(2.2)
library('devtools')
load_all()
demo_sim_hn_ext = readRDS('./inst/demo_sim_hn_ext')
true_values = demo_sim_hn_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) t
rue_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
library('devtools')
load_all()
demo_sim_hn_ext = readRDS('./inst/demo_sim_hn_ext')
true_values = demo_sim_hn_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
true_values
demo_sim_hn_ext$survey.length
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, n.sessions = n.sessions))
View(dat.density)
rep(c(1,2,2), c(3,5,4))
rep(c(1,2,1), c(3,5,4))
load_all()
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, n.sessions = n.sessions))
survey.length
load_all()
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, n.sessions = n.sessions))
survey.length
demo_sim_hn_ext$survey.length
load_all()
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions))
View(dat.density)
load_all()
demo_sim_hn_ext = readRDS('./inst/demo_sim_hn_ext')
true_values = demo_sim_hn_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions, n.rand = n.rand))
sim_sigma_int = numeric(n.rand)
sim_sigma_PHILIPS = numeric(n.rand)
sim_sigma_SONY = numeric(n.rand)
sim_sigma_sunny = numeric(n.rand)
sim_g0 = numeric(n.rand)
sim_D_int = numeric(n.rand)
sim_D_sunny = numeric(n.rand)
sim_mu = numeric(n.rand)
pb = utils::txtProgressBar(1, n.rand, style = 3)
for(i in 1:n.rand){
if(nrow(sim_out[[i]]) > 0){
capt = create.capt(sim_out[[i]], demo_sim_hn_ext$traps)
fit = fit.ascr(capt, traps = demo_sim_hn_ext$traps, mask = demo_sim_hn_ext$mask, detfn = demo_sim_hn_ext$detfn
, survey.length = demo_sim_hn_ext$survey.length, par.extend = demo_sim_hn_ext$par.extend)
tem = coef(fit)
sim_sigma_int[i] = tem['sigma.(Intercept)_link']
sim_sigma_PHILIPS[i] = tem['sigma.brandPHILIPS_link']
sim_sigma_SONY[i] = tem['sigma.brandSONY_link']
sim_sigma_sunny[i] = tem['sigma.weathersunny_link']
sim_g0[i] = tem['g0_link']
sim_D_int[i] = tem['D.(Intercept)_link']
sim_D_sunny[i] = tem['D.weathersunny_link']
sim_mu[i] = tem['mu_link']
}
utils::setTxtProgressBar(pb, i)
}
close(pb)
hist(sim_g0, main = 'g0_link simulation')
abline(v = true_values$g0, col = 2)
hist(sim_sigma_int, main = 'sigma_int_link simulation')
abline(v = true_values$sigma[1], col = 2)
hist(sim_sigma_PHILIPS, main = 'sigma_philips_link simulation')
abline(v = true_values$sigma[2], col = 2)
hist(sim_sigma_SONY, main = 'sigma_sony_link simulation')
abline(v = true_values$sigma[3], col = 2)
hist(sim_sigma_sunny, main = 'sigma_sunny_link simulation')
abline(v = true_values$sigma[4], col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_sunny, main = 'D_sunny_link simulation')
abline(v = true_values$D[2], col = 2)
hist(sim_mu, main = 'mu_link simulation')
abline(v = true_values$mu, col = 2)
load_all()
demo_sim_hn_ext = readRDS('./inst/demo_sim_hn_ext')
true_values = demo_sim_hn_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions, n.rand = n.rand))
sim_sigma_int = numeric(n.rand)
sim_sigma_PHILIPS = numeric(n.rand)
sim_sigma_SONY = numeric(n.rand)
sim_sigma_sunny = numeric(n.rand)
sim_g0 = numeric(n.rand)
sim_D_int = numeric(n.rand)
sim_D_sunny = numeric(n.rand)
sim_mu = numeric(n.rand)
pb = utils::txtProgressBar(1, n.rand, style = 3)
for(i in 1:n.rand){
if(nrow(sim_out[[i]]) > 0){
capt = create.capt(sim_out[[i]], demo_sim_hn_ext$traps)
fit = fit.ascr(capt, traps = demo_sim_hn_ext$traps, mask = demo_sim_hn_ext$mask, detfn = demo_sim_hn_ext$detfn
, survey.length = demo_sim_hn_ext$survey.length, par.extend = demo_sim_hn_ext$par.extend)
tem = coef(fit)
sim_sigma_int[i] = tem['sigma.(Intercept)_link']
sim_sigma_PHILIPS[i] = tem['sigma.brandPHILIPS_link']
sim_sigma_SONY[i] = tem['sigma.brandSONY_link']
sim_sigma_sunny[i] = tem['sigma.weathersunny_link']
sim_g0[i] = tem['g0_link']
sim_D_int[i] = tem['D.(Intercept)_link']
sim_D_sunny[i] = tem['D.weathersunny_link']
sim_mu[i] = tem['mu_link']
}
utils::setTxtProgressBar(pb, i)
}
close(pb)
hist(sim_g0, main = 'g0_link simulation')
abline(v = true_values$g0, col = 2)
hist(sim_sigma_int, main = 'sigma_int_link simulation')
abline(v = true_values$sigma[1], col = 2)
hist(sim_sigma_PHILIPS, main = 'sigma_philips_link simulation')
abline(v = true_values$sigma[2], col = 2)
hist(sim_sigma_SONY, main = 'sigma_sony_link simulation')
abline(v = true_values$sigma[3], col = 2)
hist(sim_sigma_sunny, main = 'sigma_sunny_link simulation')
abline(v = true_values$sigma[4], col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_sunny, main = 'D_sunny_link simulation')
abline(v = true_values$D[2], col = 2)
hist(sim_mu, main = 'mu_link simulation')
abline(v = true_values$mu, col = 2)
hist(sim_sigma_sunny[sim_sigma_sunny<8], main = 'sigma_sunny_link simulation')
abline(v = true_values$sigma[4], col = 2)
hist(sim_sigma_sunny[sim_sigma_sunny<2.5], main = 'sigma_sunny_link simulation')
abline(v = true_values$sigma[4], col = 2)
tem = demo_sim_hn_ext
tem$par.extend$model
tem$par.extend$model = list(D = ~weather, alpha = ~brand)
tem$par.extend$data$trap
tem$par.extend$data$session
tem$survey.length
tem$detfn
tem$param
tem$param$sigma = tem$param$sigma[1]
tem$param$sigma = 10
log(10)
tem$param$alpha = c(0.5, 0.2, 0.1)
tem$param$kappa = 10
exp(0.809017)
tem$param
saveRDS(tem, "demo_sim_bearing_dist_ext")
library('devtools')
load_all()
demo_sim_bearing_dist_ext = readRDS("./inst/demo_sim_bearing_dist_ext")
true_values = demo_sim_hn_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_hn_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions, n.rand = n.rand))
library('devtools')
load_all()
demo_sim_bearing_dist_ext = readRDS("./inst/demo_sim_bearing_dist_ext")
true_values = demo_sim_bearing_dist_ext
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_bearing_dist_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions, n.rand = n.rand))
library('devtools')
load_all()
demo_sim_bearing_dist_ext = readRDS("./inst/demo_sim_bearing_dist_ext")
true_values = demo_sim_bearing_dist_ext
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
set.seed(810)
n.rand = 100
sim_out = with(demo_sim_bearing_dist_ext, sim.capt(detfn = detfn, param = param, par.extend = par.extend,
traps = traps, mask = mask, survey.length = survey.length, n.sessions = n.sessions, n.rand = n.rand))
true_values
true_values = demo_sim_bearing_dist_ext$param
for(i in names(true_values)){
if(length(true_values[[i]]) == 1) true_values[[i]] = link.fun(default.link(i), true_values[[i]])
}
true_values
i = 1
capt = create.capt(sim_out[[i]], demo_sim_bearing_dist_ext$traps)
fit = fit.ascr(capt, traps = demo_sim_bearing_dist_ext$traps, mask = demo_sim_bearing_dist_ext$mask, detfn =          demo_sim_bearing_dist_ext$detfn, survey.length = demo_sim_bearing_dist_ext$survey.length,
par.extend = demo_sim_bearing_dist_ext$par.extend)
coef(fit)
tem = coef(fit)
sim_sigma[i] = tem['sigma_link']
sim_g0[i] = tem['g0_link']
sim_D_int[i] = tem['D.(Intercept_link)']
sim_D_sunny[i] = tem['D.weathersunny_link']
sim_mu[i] = tem['mu_link']
sim_kappa[i] = tem['kappa_link']
sim_alpha_int[i] = tem['alpha.(Intercept)_link']
sim_alpha_philips[i] = tem['alpha.brandPHILIPS_link']
sim_alpha_sony[i] = tem['alpha.brandSONY_link']
sim_sigma = numeric(n.rand)
sim_g0 = numeric(n.rand)
sim_D_int = numeric(n.rand)
sim_D_sunny = numeric(n.rand)
sim_mu = numeric(n.rand)
sim_kappa = numeric(n.rand)
sim_alpha_int = numeric(n.rand)
sim_alpha_philips = numeric(n.rand)
sim_alpha_sony = numeric(n.rand)
tem = coef(fit)
sim_sigma[i] = tem['sigma_link']
sim_g0[i] = tem['g0_link']
sim_D_int[i] = tem['D.(Intercept_link)']
sim_D_sunny[i] = tem['D.weathersunny_link']
sim_mu[i] = tem['mu_link']
sim_kappa[i] = tem['kappa_link']
sim_alpha_int[i] = tem['alpha.(Intercept)_link']
sim_alpha_philips[i] = tem['alpha.brandPHILIPS_link']
sim_alpha_sony[i] = tem['alpha.brandSONY_link']
sim_D_int[i] = tem['D.(Intercept)_link']
sim_sigma = numeric(n.rand)
sim_g0 = numeric(n.rand)
sim_D_int = numeric(n.rand)
sim_D_sunny = numeric(n.rand)
sim_mu = numeric(n.rand)
sim_kappa = numeric(n.rand)
sim_alpha_int = numeric(n.rand)
sim_alpha_philips = numeric(n.rand)
sim_alpha_sony = numeric(n.rand)
pb = utils::txtProgressBar(1, n.rand, style = 3)
for(i in 1:n.rand){
if(nrow(sim_out[[i]]) > 0){
capt = create.capt(sim_out[[i]], demo_sim_bearing_dist_ext$traps)
fit = fit.ascr(capt, traps = demo_sim_bearing_dist_ext$traps, mask = demo_sim_bearing_dist_ext$mask, detfn =          demo_sim_bearing_dist_ext$detfn, survey.length = demo_sim_bearing_dist_ext$survey.length,
par.extend = demo_sim_bearing_dist_ext$par.extend)
tem = coef(fit)
sim_sigma[i] = tem['sigma_link']
sim_g0[i] = tem['g0_link']
sim_D_int[i] = tem['D.(Intercept)_link']
sim_D_sunny[i] = tem['D.weathersunny_link']
sim_mu[i] = tem['mu_link']
sim_kappa[i] = tem['kappa_link']
sim_alpha_int[i] = tem['alpha.(Intercept)_link']
sim_alpha_philips[i] = tem['alpha.brandPHILIPS_link']
sim_alpha_sony[i] = tem['alpha.brandSONY_link']
}
utils::setTxtProgressBar(pb, i)
}
close(pb)
save.image("G:/github/ascr/bearing_dist.RData")
true_values
hist(sim_g0, main = 'g0_link simulation')
abline(v = true_values$g0, col = 2)
hist(sim_sigma, main = 'sigma_link simulation')
abline(v = true_values$sigma, col = 2)
hist(sim_kappa, main = 'kappa_link simulation')
abline(v = true_values$kappa, col = 2)
hist(sim_alpha_int, main = 'alpha_int_link simulation')
abline(v = true_values$alpha[1], col = 2)
hist(sim_alpha_philips, main = 'alpha_philips_link simulation')
abline(v = true_values$alpha[2], col = 2)
hist(sim_alpha_sony, main = 'alpha_sony_link simulation')
abline(v = true_values$alpha[3], col = 2)
hist(sim_D_int, main = 'D_int_link simulation')
abline(v = true_values$D[1], col = 2)
hist(sim_D_sunny, main = 'D_sunny_link simulation')
abline(v = true_values$D[2], col = 2)
hist(sim_mu, main = 'mu_link simulation')
abline(v = true_values$mu, col = 2)
demo_sim_bearing_dist_ext$survey.length
library(devtools)
load_all()
tem=get(bearing_hn)
tem=get('bearing_hn')
load("G:/github/ascr/data/lightfooti.RData")
load("G:/github/ascr/data/mul_ses_ext.rda")
17*42
16*42
15*42
6*42
7*42
9*42
8*42
14*42
15*42
17*42
n.sessions = 17
#read in noise values with locations
noise_loc = vector('list', n.sessions)
for(i in 1:n.sessions){
noise_loc[[i]] = read.csv(paste0("./mask1/mask", i, ".csv"), header = T)
colnames(noise_loc[[i]]) = c('x', 'y', 'noise')
}
pre_fix = "G:/work/ben/owl_study/"
#for the 2020 study, there were 17 arrays of traps, regard them as 17 sessions
#temporarily assume that each array of traps were deployed for the same length
#of period of time, so suvery.length = rep(1, 17), and we could leave it as NULL
#in the model.
n.sessions = 17
#read in noise values with locations
noise_loc = vector('list', n.sessions)
for(i in 1:n.sessions){
noise_loc[[i]] = read.csv(paste0(pre_fix, "mask1/mask", i, ".csv"), header = T)
colnames(noise_loc[[i]]) = c('x', 'y', 'noise')
}
#read in traps location
traps_loc = vector('list', n.sessions)
for(i in 1:n.sessions){
traps_loc[[i]] = read.csv(paste0(pre_fix, "traps1/trap", i, ".csv"), header = T)
colnames(traps_loc[[i]]) = c('x', 'y')
}
#generate "mask" data based on traps locations
mask = create.mask(traps_loc, buffer = 350)
#find the closest location which contains noise value for each mask point
df_noise = vector('list', n.sessions)
for(i in 1:n.sessions){
tem_mask = mask[[i]]
tem_noise = noise_loc[[i]]
d = distances(as.matrix(tem_mask), as.matrix(tem_noise[,c('x', 'y')]))
index_min = apply(d, 1, which.min)
df_noise[[i]] = data.frame(session = i, mask = 1:nrow(tem_mask), noise = tem_noise$noise[index_min])
}
df_noise = do.call('rbind', df_noise)
View(df_noise)
#deal with capture history
raw_dat = read.csv(paste0(pre_fix, 'capt1.csv'), header = T)
View(raw_dat)
capture_history = data.frame(session = raw_dat$Array, ID = raw_dat$ID, occasion = 1, trap = raw_dat$Detector,
animal_ID = raw_dat$Individual, ss = raw_dat$ss)
capt = create.capt(captures = capture_history, traps = traps_loc)
View(capt)
View(capture_history)
View(raw_dat)
#build the arguments for the fit.ascr()
par.extend = list(model = list(D = ~noise), data = list(mask = df_noise), scale = TRUE)
#the minimum value of 'ss' is taken as cutoff
ss.opts = list(cutoff = 42)
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
)
load_all()
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
)
View(data.full)
View(data.dists.thetas)
View(data.ID_mask)
View(data.full)
View(capt)
unique(capt$animal_ID)
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
)
unique(paste(data.full$session, data.full$animal_ID, sep = "-"))
View(capt)
unique(paste(capt$session, capt$animal_ID, sep = "-"))
sv.input
exp(1.7)
exp(4.310874)
ss.link
exp(-1.683374)
View(data.par)
exp(4.310874) - exp(-1.683374) * sample(data.dists.thetas$dx, 5)
tem = exp(4.310874) - exp(-1.683374) * data.dists.thetas$dx
range(tem)
range(data.full$ss)
range(data$capt_ss)
hist(data$capt_ss)
hist(data$capt_ss[data$capt_ss!=0])
min(data$capt_ss[data$capt_ss!=0])
exp(4.310874)
range(data.dists.thetas$dx)
load_all()
compile.ascr(TRUE)
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
)
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
, dev = TRUE)
compile.ascr()
getwd()
dyn.load(TMB::dynlib(paste0(getwd(), '/inst/TMB/ascrTmb')))
system.file(package = "ascr")
load_all()
compile.ascr()
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts
, par.extend = par.extend
)
library(devtools)
load_all()
fit = fit.ascr(capt, traps_loc, mask, animal.model = T, ss.opts = ss.opts, par.extend = par.extend)

as.data.frame(tem)
rownames(tem) = c('a', 'b', 'c', 'd', 'e')
tem
as.data.frame(tem)
as.data.frame(as.data.frame(tem))
tem = demo_fit('ihd_ext')
tem = demo_fit('ihd_ext', dev = TRUE)
load_all()
tem = demo_fit('ihd_ext', dev = TRUE)
View(data.full)
traps = list(matrix(c(0,5,0,10,0,15,0,20), ncol = 2, byrow = T), matrix(c(0,5,0,10,0,15), ncol = 2, byrow = T), mtrix(c(0,5,0,10,0,15), ncol = 2, byrow = TRUE))
traps = list(matrix(c(0,5,0,10,0,15,0,20), ncol = 2, byrow = T), matrix(c(0,5,0,10,0,15), ncol = 2, byrow = T), matrix(c(0,5,0,10,0,15), ncol = 2, byrow = TRUE))
traps
masks = create.mask(traps = traps, buffer = 20)
capt = create.capt(cap[,-which(colnames(cap == 'animal_ID'))], traps = traps)
capt = create.capt(cap[,-which(colnames(cap) == 'animal_ID')], traps = traps)
load_all()
tem = fit.ascr(capt = capt, traps = traps, mask = masks)
View(data.full)
load_all()
tem = fit.ascr(capt = capt, traps = traps, mask = masks)
View(data.full)
load_all()
tem = fit.ascr(capt = capt, traps = traps, mask = masks)
View(data.full)
load_all()
tem = fit.ascr(capt = capt, traps = traps, mask = masks)
View(data.full)
capt = create.capt(cap, traps = traps)
View(capt)
load_all()
capt = create.capt(cap, traps = traps)
View(capt)
load_all()
capt = create.capt(cap, traps = traps)
View(capt)
24*0.96
saveRDS(traps, './inst/demo_traps')
saveRDS(masks, './inst/demo_masks')
max(NA)
base_cols = c('session', 'animal_ID', 'ID', 'trap', 'bincapt')
paste0('columns: ', paste(base_cols, collapse = ", "), " must be included.")
library(devtools)
load_all()
demo_capt = readRDS('./inst/demo_capt')
demo_capt = readRDS('./inst/demo_captures')
demo_trap = readRDS('./inst/demo_traps')
demo_mask = readRDS('./inst/demo_masks')
capt = create.capt(demo_capt, demo_trap)
tem = fit.ascr(capt, demo_trap, demo_mask)
tem = fit.ascr(capt, demo_trap, demo_mask, animal.model = TRUE)
load_all()
tem = fit.ascr(capt, demo_trap, demo_mask, animal.model = TRUE)
View(data.full)
load_all()
tem = fit.ascr(capt, demo_trap, demo_mask, animal.model = TRUE)
View(data.full)
library(devtools)
load_all()
demo_fit('simple_hn', dev = T)
View(data.full)
data.full = sort.data(data.full, 'data.full')
View(data.full)
demo_capt = readRDS('./inst/demo_capture')
demo_capt = readRDS('./inst/demo_captures')
View(demo_capt)
demo_trap = readRDS('./inst/demo_trap')
demo_trap = readRDS('./inst/demo_traps')
demo_mask = readRDS("./inst/demo_masks")
capt = create.capt(demo_capt, demo_trap)
View(capt)
fit.ascr(capt, demo_trap,demo_mask)
View(data.full)
demo_fit('mul_ses', TRUE)
View(data.full)
demo_fit('mul_ses', TRUE)
View(data.full)
load_all()
demo_fit('mul_ses', TRUE)
View(data.full)
fit.ascr(capt, demo_trap,demo_mask)
View(data.full)
View(demo_capt)
?stopifnot
stopifnot(TRUE,TRUE)
stopifnot(TRUE,FALSE)
TRUE | FALSE
TRUE || FALSE
TRUE || FALSE
tem = list(matrix(0, ncol = 2, nrow = 2), matrix(1, ncol = 2, nrow = 3))
sapply(tem, function(x) is(x, 'data.frame'))
sapply(tem, function(x) is(x, 'matrix'))
sapply(tem, nrow)
sapply(tem, ncol)
sapply(tem, colnames)
lapply(tem, colnames)
colnames(tem[[1]] = c('a', 'b'))
colnames(tem[[1]]) = c('a', 'b')
colnames(tem[[2]]) = c('a', 'b')
lapply(tem, colnames)
lapply(lapply(tem, colnames), function(x) c('a', 'b') %in% x)
sapply(lapply(tem, colnames), function(x) c('a', 'b') %in% x)
all(sapply(lapply(tem, colnames), function(x) c('a', 'b') %in% x))
sapply(tem, colnames)
sapply(tem, function(x) is(x, 'matrix'))
sapply(tem, function(x) is(x, 'matrix') || is(x, 'data.frame'))
sapply(tem, function(x) is(x, 'matrix') & is(x, 'data.frame'))
tem
t = matrix(1, ncol =2, nrow = 3)
list(t)
tem = vector('list', 3)
tem[[1]] = matrix(0, ncol = 2, nrow = 5)
tem[[3]] = matrix(0, ncol = 2, nrow = 4)
lapply(tem, ncol)
sapply(tem, ncol)
lapply(tem, function(x) is(x, 'matrix') | is.null(x))
sapply(tem, function(x) is(x, 'matrix') | is.null(x))
tem
do.call('rbind', tem)
library('devtools')
load_all()
captures = readRDS('./inst/demo_captures')
traps = readRDS('./inst/demo_traps')
masks = readRDS('./inst/demo_masks')
capt = create.capt(captures, traps)
capt2 = create.capt(captures[,-which(colnames(captures) == 'animal_ID')], traps)
capt = create.capt(captures, traps)
load_all()
capt = create.capt(captures, traps)
View(capt)
load_all()
tem = fit.ascr(capt, traps, masks, animal.model = T)
View(all.which.local)
tem = fit.ascr(capt, traps, masks, animal.model = T, local = T)
View(all.n.local)
View(all.which.local)
View(bincapt)
n.masks
View(data.full)
View(tem)
View(capt)
View(captures)
captures = captures[-4,]
capt = create.capt(captures = captures, traps = traps)
fit.ascr(capt, traps, masks, animal.model = T)
View(all.n.local)
fit.ascr(capt, traps, masks, animal.model = T, local = T)
View(all.n.local)
View(all.which.local)
View(all.n.local)
View(all.which.local)
i = 1
#for each animal_ID,
#######################################################################33
##########################################################################
############################################################################
#continue from here
tem = data.full[data.full$session == i, c("bincapt", "animal_ID", "trap")]
tem = aggregate(tem$bincapt, list(animal_ID = tem$animal_ID, trap = tem$trap),
function(x) as.numeric(any(x == 1)))
tem = tem[order(tem$animal_ID, tem$trap),,drop = FALSE]
bincapt = tem[, c('animal_ID', 'x')]
colnames(bincapt) = c('animal_ID', 'bincapt')
bincapt = aggregate(bincapt$bincapt, list(animal_ID = bincapt$animal_ID),
function(x) t(x))
bincapt = bincapt[order(bincapt$animal_ID),]
bincapt = bincapt[, -1]
View(bincapt)
all.which.local[[i]] <- find_local(bincapt, dists[[i]], buffer[i])
all.n.local[[i]] <- plyr::laply(all.which.local[[i]], length)
View(all.n.local)
bincapt
data.traps
View(captures)
captures = captures[-1,]
capt = create.capt(captures, traps)
fit.ascr(capt, traps, masks, animal.model = T, local = T)
View(all.n.local)
View(all.which.local)
View(mask)
attr(masks[[1]], 'buffer')
View(data.full)
i = 1
#for each animal_ID,
#######################################################################33
##########################################################################
############################################################################
#continue from here
tem = data.full[data.full$session == i, c("bincapt", "animal_ID", "trap")]
tem = aggregate(tem$bincapt, list(animal_ID = tem$animal_ID, trap = tem$trap),
function(x) as.numeric(any(x == 1)))
tem = tem[order(tem$animal_ID, tem$trap),,drop = FALSE]
bincapt = tem[, c('animal_ID', 'x')]
colnames(bincapt) = c('animal_ID', 'bincapt')
bincapt = aggregate(bincapt$bincapt, list(animal_ID = bincapt$animal_ID),
function(x) t(x))
bincapt = bincapt[order(bincapt$animal_ID),]
bincapt = bincapt[, -1]
View(bincapt)
View(dists)
buffer
tem = dists[[1]]
all.n.local[[1]]
bincapt
n1 = 0
for(i in 1:ncol(tem)){}
for(i in 1:ncol(tem)){
if(all(tem[2,i]<20, tem[4,i]<20)) n1 = n1 + 1
}
n1
for(i in 1:ncol(tem)){
if(all(tem[2,i]<20, tem[4,i]<20)) n1 = n1 + 1
}
for(i in 1:ncol(tem)){
if(all(tem[2,i]<20, tem[4,i]<20)){} n1 = n1 + 1
}
for(i in 1:ncol(tem)){
if(all(tem[2,i]<20, tem[4,i]<20)){
n1 = n1 + 1
}
}
n1
fit.ascr(capt, traps, masks, animal.model = T, local = T)
tem = dists[[1]]
ncol(tem)
n1 = 0
for(i in 1:4764) if(tem[2,i]>20 & tem[4,i]>20) n1 = n1 + 1
sum(tem[2,] > 20 & tem[4,] >20)
sum(tem[2,]>20)
sum(tem[2,] < 20 & tem[4,] < 20)
all.n.local[[1]]
sum(tem[2,] < 20 & tem[4,] < 20 & tem[1,] < 20 & tem[3,] < 20)
sum(tem[1,]<20)
sum(tem[2,]<20)
sum(tem[3,]<20)
sum(tem[4,]<20)
fit.ascr(capt, traps, masks, animal.model = T, local = T)
View(all.n.local)
View(all.which.local)
2212+1724
tem = dists[[3]]
rowsum(tem>20)
rowsum(as.numeric(tem>20))
tem>20
tem
tem[1:3,1:10]
tem[1:3,1:10] > 20
tem[1:3,1:10] < 20
tem1 = tem < 20
rowsum(tem1)
sum(tem1[1,] & tem[2,] & tem[3,])
all.n.local
sum(tem1[1,] & tem1[2,] & tem1[3,])
16000 + 10000 + 15000
data.frame(a = 1:10, b = 11:20, stringsAsFactors = F)
capt
aggregate(capt$bincapt, list(session = capt$session, animal_ID = capt$animal_ID), function(x) t(x))
aggregate(capt$bincapt, list(session = capt$session, animal_ID = capt$animal_ID), function(x) t(x))$x
aggregate(capt$bincapt, list(session = capt$session, animal_ID = capt$animal_ID, ID = capt$ID), function(x) t(x))$x
aggregate(capt$bincapt, list(animal_ID = capt$animal_ID, ID = capt$ID), function(x) t(x))$x
capt1 = subset(capt, session == 1)
aggregate(capt1$bincapt, list(animal_ID = capt1$animal_ID, ID = capt1$ID), function(x) t(x))$x
load_all()
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
capt
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
for (i in 1:n.sessions){
if(n.IDs[i] > 0){
if(animal.model){
#for each animal_ID, find the detectors have at least one record of any call of this animal
tem = data.full[data.full$session == i, c("bincapt", "animal_ID", "trap")]
tem = aggregate(tem$bincapt, list(animal_ID = tem$animal_ID, trap = tem$trap),
function(x) as.numeric(any(x == 1)))
tem = tem[order(tem$animal_ID, tem$trap),,drop = FALSE]
bincapt = tem[, c('animal_ID', 'x')]
colnames(bincapt) = c('animal_ID', 'bincapt')
bincapt = aggregate(bincapt$bincapt, list(animal_ID = bincapt$animal_ID),
function(x) t(x))
bincapt = bincapt[order(bincapt$animal_ID),]
bincapt = bincapt[, -1]
} else {
bincapt = data.full[data.full$session == i, c("bincapt","ID")]
bincapt = aggregate(bincapt$bincapt, list(ID = bincapt$ID),
function(x) t(x))
bincapt = bincapt[order(bincapt$ID),]
bincapt = bincapt[, -1]
}
all.which.local[[i]] <- find_local(bincapt, dists[[i]], buffer[i])
all.n.local[[i]] <- plyr::laply(all.which.local[[i]], length)
all.which.local[[i]] <- c(all.which.local[[i]], recursive = TRUE)
}
}
n.IDs
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
n.animal.call
n.animals
aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))
capt
aggregate(paste(capt$animal_ID, capt$ID, sep = "-"), list(session = capt$session),
function(x) length(unique(x)))
paste(capt$animal_ID, capt$ID, sep = "-")
aggregate(capt$animal_ID, list(session = capt$session), max)
load_all()
fit.ascr(capt, traps, masks, animal.model = T, local = T)
aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))
#n.IDs becomes the number of length(unique(animal_ID, ID)) for each session
n.IDs = aggregate(paste(capt$animal_ID, capt$ID), list(session = capt$session),
function(x) length(unique(x)))$x
n.IDs = ifelse(n.animals == 0, 0, n.IDs)
n.IDs
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
tem = fit.ascr(capt = capt, traps, masks, detfn = 'hhn',
sv = list(D = 600, lambda0 = 9, sigma = 2, mu = 9, sigma.toa = 10),
dev = TRUE)
tem = subset(data.ID_mask, session == 2 & mask == 777)
tem
tem = subset(data.ID_mask, session == 2 & mask == 777 & animal_ID == 7)
tem
subset(data.full, session == 2 & animal_ID == 7 & (ID == 8 | ID == 7))
subset(data.full, session == 2 & animal_ID == 7 & (ID == 8 | ID == 7), select = c('session', 'animal_ID', 'ID', 'trap', 'bincapt', 'toa'))
sound.speed
q
tem$output.tmb$coef_link
View(captures)
subset(captures, session == 2 & as.numeric(as.factor(animal_ID)) == 7)
tem = subset(captures, session == 2)
tem
subset(tem, as.numeric(as.factor(animal_ID)) == 7)
tem1 = subset(tem, as.numeric(as.factor(animal_ID)) == 7)
tem1$ID = as.numeric(as.factor(tem1$ID))
tem1
library('devtools')
load_all()
compile.ascr(T)
captures = readRDS('./inst/capt_paper')
traps = readRDS("./inst/traps_paper")
masks = readRDS("./inst/mask_paper")
capt = create.capt(captures, traps)
View(masks)
#' @param mask
#' @param survey.length
#' @param ss.opts
#' @param cue.rates
#' @param sound.speed
#'
#' @return
#' @export
#'
#' @examples
sim.capt = function(fit, detfn, par, par.extend, traps, mask, survey.length, ss.opts, cue.rates, sound.speed = 330){
browser()
if(!is.null(fit)){
return(sim.from.fit(fit))
} else {
stopifnot(all(!is.null(detfn), !is.null(par), !is.null(traps), !is.null(mask)))
return(sim.from.par(detfn = detfn, par = par, par.extend = par.extend, traps = traps,
mask = mask, survey.length = survey.length, ss.opts = ss.opts, cue.rates = cue.rates,
sound.speed = sound.speed))
}
}
sim.capt(fit = 10)
is.null(fit)
is.null(detfn)
is.missing(detfn)
is.null(detfn)
missing(detfn)
rm(sim.capt)
View(traps)
is(traps, 'data.frame')
is(traps, 'matrix')
par.extend = readRDS('./inst/demo_extend_no_animal_ID')
View(par.extend)
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = funcion(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link = function(i){
if(i == "mu") return('log')
if(i == "D") return('log')
if(i == "g0") return('logit')
if(i == "sigma") return('log')
if(i == "lambda0") return('log')
if(i == "z") return('log')
if(i == "shape.1") return('log')
if(i == "shape.2") return('identity')
if(i == "shape") return('identity')
if(i == "scale") return('log')
if(i == "b0.ss") return('log')
if(i == "b1.ss") return('log')
if(i == "b2.ss") return('log')
if(i == "sigma.ss") return('log')
if(i == "kappa") return('log')
if(i == "alpha") return('log')
if(i == "sigma.toa") return('log')
if(i == "sigma.b0.ss") return('log')
}
default.link('mu')
traps = list(traps, traps)
masks = list(masks, masks)
attr(masks[[1]], 'buffer')
attr(masks[[1]], 'area.unit')
attr(masks[[1]])
?attr
attr(masks[[1]], 'area')
c('D')
detfn = 's'
detfn = 'ss'
is.ss = detfn == 'ss'
is.ss
rep(1:2, c(5,3))
cat('order')
